{
	"info": {
		"_postman_id": "df9a5f87-1fe0-419a-acce-74af80508673",
		"name": "Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User management",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create a new user', function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Data of a new user is correct\", function () {\r",
									"    var jsonData = pm.response.json().new_user;\r",
									"    pm.expect(jsonData.email).to.eql(\"lvr31@alu.ua.es\");\r",
									"    pm.expect(jsonData.nick).to.eql(\"elbaidal\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lvr31@alu.ua.es\",\r\n    \"nick\": \"elbaidal\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create a new user', function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Data of a new user is correct\", function () {\r",
									"    var jsonData = pm.response.json().new_user;\r",
									"    pm.expect(jsonData.email).to.eql(\"baidal@gmail.com\");\r",
									"    pm.expect(jsonData.nick).to.eql(\"baidal\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"baidal@gmail.com\",\r\n    \"nick\": \"baidal\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create duplicated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create duplicated user returns status 400', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Duplicated user returns error\", function () {\r",
									"    var jsonData = pm.response.json().errores;\r",
									"    pm.expect(jsonData[0].error).to.eql(\"El email introducido ya existe.\");\r",
									"    pm.expect(jsonData[1].error).to.eql(\"El nick introducido ya existe.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lvr31@alu.ua.es\",\r\n    \"nick\": \"elbaidal\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create incorrect user email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create incorrect user returns status 400', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Incorrect email in payload returns error\", function () {\r",
									"    var jsonData = pm.response.json().errores;\r",
									"    pm.expect(jsonData[0].error).to.eql(\"Debes introducir un email válido.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"nick\": \"\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create incorrect user nick",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create incorrect user returns status 400', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Incorrect nick in payload returns error\", function () {\r",
									"    var jsonData = pm.response.json().errores;\r",
									"    pm.expect(jsonData[0].error).to.eql(\"Debes introducir un nick.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"dasd@gmail.com\",\r\n    \"nick\": \"\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create incorrect user password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create incorrect user returns status 400', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Incorrect password in payload returns error\", function () {\r",
									"    var jsonData = pm.response.json().errores;\r",
									"    pm.expect(jsonData[0].error).to.eql(\"Debes introducir una contraseña correcta.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"dasd@gmail.com\",\r\n    \"nick\": \"dadaddasd\",\r\n    \"password\": \"12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Login status is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Correct login returns correct payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const user = jsonData.user\r",
									"    const token = jsonData.token\r",
									"\r",
									"    //check user data\r",
									"    pm.expect(user.nick).to.eql(\"elbaidal\");\r",
									"    pm.expect(user.url_image).to.eql(\"\");\r",
									"    pm.expect(user.email).to.eql(\"lvr31@alu.ua.es\");\r",
									"    \r",
									"    //check token\r",
									"    pm.expect(token).to.not.be.null\r",
									"\r",
									"    pm.globals.set(\"token\", token);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nickEmail\": \"lvr31@alu.ua.es\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Login status is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Correct login returns correct payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const user = jsonData.user\r",
									"    const token = jsonData.token\r",
									"\r",
									"    //check user data\r",
									"    pm.expect(user.nick).to.eql(\"baidal\");\r",
									"    pm.expect(user.url_image).to.eql(\"\");\r",
									"    pm.expect(user.email).to.eql(\"baidal@gmail.com\");\r",
									"    \r",
									"    //check token\r",
									"    pm.expect(token).to.not.be.null\r",
									"\r",
									"    pm.globals.set(\"token_2\", token);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nickEmail\": \"baidal\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login an incorrect user', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Usuario no encontrado en el sistema o contraseña incorrecta.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nickEmail\": \"lvr31@alu.ua.es\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Community management",
			"item": [
				{
					"name": "Create community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create new community status is 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test(\"New community data is ok\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"baidal\");\r",
									"    pm.expect(jsonData.description).to.eql(\"Mi primera comunidad\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"baidal\",\r\n    \"description\": \"Mi primera comunidad\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/comunidad",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create duplicated community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create duplicated community status is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"baidal\",\r\n    \"description\": \"Mi primera comunidad\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/comunidad",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create incorrect community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create duplicated community status is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test(\"Incorrect email in payload returns error\", function () {\r",
									"    var jsonData = pm.response.json().errores;\r",
									"    pm.expect(jsonData[0].error).to.eql(\"No se ha introducido el nombre\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/comunidad",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get community status is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Correct community payload\", function () {\r",
									"    var community = pm.response.json()\r",
									"    pm.expect(community.name).to.eql(\"baidal\");\r",
									"    pm.expect(community.description).to.eql(\"Mi primera comunidad\");\r",
									"    pm.expect(community.numFollowers).to.eql(\"0\");\r",
									"    pm.expect(community.Posts).to.eql([]);\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/comunidad/baidal",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad",
								"baidal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Follow community status is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Follow community returns ok\", function() {\r",
									"    var response = pm.response.json()\r",
									"    pm.expect(response.status).to.eql(\"Comunidad añadida con éxito\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/comunidad/usuario/baidal",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad",
								"usuario",
								"baidal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unfollow community status is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Unfollow community returns ok\", function() {\r",
									"    var response = pm.response.json()\r",
									"    pm.expect(response.status).to.eql(\"Comunidad eliminada con éxito\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/comunidad/usuario/baidal",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad",
								"usuario",
								"baidal"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post management",
			"item": [
				{
					"name": "Create post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create new post status is 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test(\"New post data is ok\", function () {\r",
									"    var post = pm.response.json().new_post;\r",
									"    pm.expect(post.votes).to.eql(0);\r",
									"    pm.expect(post.title).to.eql(\"Post 1 en test\");\r",
									"    pm.expect(post.text).to.eql(\"Post en test\");\r",
									"    pm.expect(post.url_image).to.eql(null);\r",
									"    pm.expect(post.numComments).to.eql(0);\r",
									"    pm.expect(post.comments).to.eql([]);\r",
									"    pm.expect(post.userNick).to.eql(\"elbaidal\");\r",
									"    pm.expect(post.communityName).to.eql(\"baidal\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Post en test\",\r\n    \"title\": \"Post 1 en test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/comunidad/baidal/post",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad",
								"baidal",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create second post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create new post status is 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test(\"New post data is ok\", function () {\r",
									"    var post = pm.response.json().new_post;\r",
									"    pm.expect(post.votes).to.eql(0);\r",
									"    pm.expect(post.title).to.eql(\"Post 2 en test\");\r",
									"    pm.expect(post.text).to.eql(\"Post en test\");\r",
									"    pm.expect(post.url_image).to.eql(null);\r",
									"    pm.expect(post.numComments).to.eql(0);\r",
									"    pm.expect(post.comments).to.eql([]);\r",
									"    pm.expect(post.userNick).to.eql(\"elbaidal\");\r",
									"    pm.expect(post.communityName).to.eql(\"baidal\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Post en test\",\r\n    \"title\": \"Post 2 en test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/comunidad/baidal/post",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"comunidad",
								"baidal",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get post satus is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Get post data is ok\", function () {\r",
									"    var post = pm.response.json().post;\r",
									"    var user = post.User\r",
									"    \r",
									"    //post data is ok\r",
									"    pm.expect(post.votes).to.eql(0);\r",
									"    pm.expect(post.title).to.eql(\"Post 1 en test\");\r",
									"    pm.expect(post.text).to.eql(\"Post en test\");\r",
									"    pm.expect(post.url_image).to.eql(null);\r",
									"    pm.expect(post.Comments).to.eql([]);\r",
									"\r",
									"    //user data\r",
									"    pm.expect(user.nick).to.eql(\"elbaidal\");\r",
									"    pm.expect(user.email).to.eql(\"lvr31@alu.ua.es\");\r",
									"\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"dasdasdasd\",\r\n    \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/post/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete incorrect post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete non-existent post status is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test(\"Delete non-existent post returns errors\", function () {\r",
									"    var errors = pm.response.json().errores;\r",
									"    pm.expect(errors[0].error).to.eql(\"No se ha encontrado el post con id -3\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/post/-3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"-3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete post without permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete post without permission status is 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Delete post without permission errors are ok\", function () {\r",
									"    var errors = pm.response.json().errores;\r",
									"    pm.expect(errors[0].error).to.eql(\"El usuario identificado no puede eliminar el Post\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/post/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete post without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete post without token status is 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Delete post without permission errors are ok\", function () {\r",
									"    var errors = pm.response.json().errores;\r",
									"    pm.expect(errors[0].error).to.eql(\"Token no introducido en la petición\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/post/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete post status is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Incorrect post errors are ok\", function () {\r",
									"    var status = pm.response.json().Estado;\r",
									"    pm.expect(status).to.eql(\"Post eliminado con éxito\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/post/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment management",
			"item": [
				{
					"name": "Create comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create new comment status is 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test(\"New comment data is ok\", function () {\r",
									"    var comment = pm.response.json().new_comment;\r",
									"    pm.expect(comment.votes).to.eql(0);\r",
									"    pm.expect(comment.text).to.eql(\"comentario test\");\r",
									"    pm.expect(comment.is_subComment).to.eql(false);    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"comentario test\",\r\n    \"commentId\":-1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/post/2/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"2",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create subcomment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create new subcomment status is 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test(\"New subcomment data is ok\", function () {\r",
									"    var comment = pm.response.json().new_subcomment;\r",
									"    pm.expect(comment.votes).to.eql(0);\r",
									"    pm.expect(comment.text).to.eql(\"comentario test\");\r",
									"    pm.expect(comment.is_subComment).to.eql(true);    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"comentario test\",\r\n    \"commentId\":1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/post/2/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"2",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get post retrieves comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get post status is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"New comment data is ok in post\", function () {\r",
									"    var comment = pm.response.json().post.Comments[0];\r",
									"    var subComment = comment.subComments[0]\r",
									"\r",
									"    //comment check\r",
									"    pm.expect(comment.votes).to.eql(0);\r",
									"    pm.expect(comment.text).to.eql(\"comentario test\");\r",
									"    pm.expect(comment.is_subComment).to.eql(false);\r",
									"\r",
									"    \r",
									"    //subcomment check\r",
									"    pm.expect(subComment.votes).to.eql(0);\r",
									"    pm.expect(subComment.text).to.eql(\"comentario test\");\r",
									"    pm.expect(subComment.is_subComment).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/post/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"post",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}